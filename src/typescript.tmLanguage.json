{
	"name": "TypeScript",
	"scopeName": "source.ts",
	"fileTypes": [
		"ts"
	],
	"uuid": "ef98eb90-bf9b-11e4-bb52-0800200c9a66",
	"patterns": [
		{
			"include": "#statements"
		}
	],
	"repository": {
		"statements": {
			"patterns": [
				{
					"include": "#string"
				},
				{
					"include": "#regex"
				},
				{
					"include": "#template"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#literal"
				},
				{
					"include": "#declaration"
				},
				{
					"include": "#switch-statement"
				},
				{
					"include": "#for-loop"
				},
				{
					"include": "#after-operator-block"
				},
				{
					"include": "#decl-block"
				},
				{
					"include": "#control-statement"
				},
				{
					"include": "#expression"
				}
			]
		},
		"var-expr": {
			"name": "meta.var.expr.ts",
			"begin": "(?<!\\.|\\$)(?:(\\bexport)\\s+)?\\b(var|let|const(?!\\s+enum\\b))\\b(?!\\$)",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.export.ts"
				},
				"2": {
					"name": "storage.type.ts"
				}
			},
			"end": "(?=$|;|}|(\\s+(of|in)\\s+))",
			"patterns": [
				{
					"include": "#var-single-variable"
				},
				{
					"include": "#variable-initializer"
				},
				{
					"include": "#comment"
				}
			]
		},
		"var-single-variable": {
			"name": "meta.var-single-variable.expr.ts",
			"begin": "([_$[:alpha:]][_$[:alnum:]]*)",
			"end": "(?=$|[;,=}]|(\\s+(of|in)\\s+))",
			"patterns": [
				{
					"include": "#type-annotation"
				},
				{
					"include": "#string"
				},
				{
					"include": "#comment"
				}
			]
		},
		"ternary-expression": {
			"begin": "(?=\\?)",
			"end": "(?=$|[;,})\\]])",
			"patterns": [
				{
					"include": "#ternary-operator"
				},
				{
					"include": "#expression"
				}
			]
		},
		"ternary-operator": {
			"begin": "(\\?)",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.ternary.ts"
				}
			},
			"end": "(:)",
			"endCaptures": {
				"0": {
					"name": "keyword.operator.ternary.ts"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"expression": {
			"name": "meta.expression.ts",
			"patterns": [
				{
					"include": "#string"
				},
				{
					"include": "#regex"
				},
				{
					"include": "#template"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#literal"
				},
				{
					"include": "#function-declaration"
				},
				{
					"include": "#class-or-interface-declaration"
				},
				{
					"include": "#arrow-function"
				},
				{
					"include": "#cast"
				},
				{
					"include": "#ternary-expression"
				},
				{
					"include": "#new-expr"
				},
				{
					"include": "#object-literal"
				},
				{
					"include": "#expression-operators"
				},
				{
					"include": "#function-call"
				},
				{
					"include": "#identifiers"
				},
				{
					"include": "#paren-expression"
				}
			]
		},
		"control-statement": {
			"patterns": [
				{
					"name": "keyword.control.trycatch.ts",
					"match": "(?<!\\.|\\$)\\b(catch|finally|throw|try)\\b(?!\\$)"
				},
				{
					"name": "keyword.control.loop.ts",
					"match": "(?<!\\.|\\$)\\b(break|continue|do|goto|while)\\b(?!\\$)"
				},
				{
					"name": "keyword.control.flow.ts",
					"match": "(?<!\\.|\\$)\\b(return)\\b(?!\\$)"
				},
				{
					"match": "(?<!\\.|\\$)\\b(yield)\\b(?!\\$)(?:\\s*(\\*))?",
					"captures": {
						"1": {
							"name": "keyword.control.flow.ts"
						},
						"2": {
							"name": "keyword.generator.asterisk.ts"
						}
					}
				},
				{
					"name": "keyword.control.switch.ts",
					"match": "(?<!\\.|\\$)\\b(case|default|switch)\\b(?!\\$)"
				},
				{
					"name": "keyword.control.conditional.ts",
					"match": "(?<!\\.|\\$)\\b(else|if)\\b(?!\\$)"
				},
				{
					"name": "keyword.control.with.ts",
					"match": "(?<!\\.|\\$)\\b(with)\\b(?!\\$)"
				},
				{
					"name": "keyword.other.debugger.ts",
					"match": "(?<!\\.|\\$)\\b(debugger)\\b(?!\\$)"
				},
				{
					"name": "storage.modifier.ts",
					"match": "(?<!\\.|\\$)\\b(declare)\\b(?!\\$)"
				}
			]
		},
		"declaration": {
			"name": "meta.declaration.ts",
			"patterns": [
				{
					"include": "#decorator"
				},
				{
					"include": "#var-expr"
				},
				{
					"include": "#function-declaration"
				},
				{
					"include": "#class-or-interface-declaration"
				},
				{
					"include": "#type-declaration"
				},
				{
					"include": "#enum-declaration"
				},
				{
					"include": "#namespace-declaration"
				},
				{
					"include": "#import-equals-declaration"
				},
				{
					"include": "#import-declaration"
				},
				{
					"include": "#export-declaration"
				}
			]
		},
		"decorator": {
			"name": "meta.decorator.ts",
			"begin": "(?<!\\.|\\$)\\@",
			"end": "(?=\\s)",
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"type-declaration": {
			"name": "meta.type.declaration.ts",
			"begin": "(?<!\\.|\\$)(?:(\\bexport)\\s+)?\\b(type)\\b\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.export.ts"
				},
				"2": {
					"name": "storage.type.type.ts"
				}
			},
			"end": "(?=[};]|\\bvar\\b|\\blet\\b|\\bconst\\b|\\btype\\b|\\bfunction\\b|\\bclass\\b|\\binterface\\b|\\bnamespace\\b|\\bmodule\\b|\\bimport\\b|\\benum\\b|\\bdeclare\\b|\\bexport\\b|\\babstract\\b|\\basync\\b)",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#type-parameters"
				},
				{
					"include": "#type"
				},
				{
					"match": "(=)\\s*",
					"captures": {
						"1": {
							"name": "keyword.operator.assignment.ts"
						}
					}
				}
			]
		},
		"enum-declaration": {
			"name": "meta.enum.declaration.ts",
			"match": "(?<!\\.|\\$)(?:(\\bexport)\\s+)?(?:\\b(const)\\s+)?\\b(enum)\\s+([_$[:alpha:]][_$[:alnum:]]*)",
			"captures": {
				"1": {
					"name": "keyword.other.export.ts"
				},
				"2": {
					"name": "storage.modifier.ts"
				},
				"3": {
					"name": "storage.type.enum.ts"
				}
			}
		},
		"namespace-declaration": {
			"name": "meta.namespace.declaration.ts",
			"begin": "(?<!\\.|\\$)(?:(\\bexport)\\s+)?\\b(namespace|module)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.export.ts"
				},
				"2": {
					"name": "storage.type.namespace.ts"
				}
			},
			"end": "(?=$|\\{)",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#string"
				}
			]
		},
		"import-equals-declaration": {
			"patterns": [
				{
					"name": "meta.import-equals.external.ts",
					"begin": "(?<!\\.|\\$)(?:(\\bexport)\\s+)?\\b(import)\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*(=)\\s*(require)\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.export.ts"
						},
						"2": {
							"name": "keyword.other.import.ts"
						},
						"4": {
							"name": "keyword.operator.assignment.ts"
						},
						"5": {
							"name": "keyword.other.require.ts"
						},
						"6": {
							"name": "meta.brace.round.ts"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "meta.brace.round.ts"
						}
					},
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"include": "#string"
						}
					]
				},
				{
					"name": "meta.import-equals.internal.ts",
					"begin": "(?<!\\.|\\$)(?:(\\bexport)\\s+)?\\b(import)\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*(=)\\s*(?!require\\b)",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.export.ts"
						},
						"2": {
							"name": "keyword.other.import.ts"
						},
						"4": {
							"name": "keyword.operator.assignment.ts"
						}
					},
					"end": "(?=;|$)",
					"patterns": [
						{
							"include": "#comment"
						}
					]
				}
			]
		},
		"import-declaration": {
			"name": "meta.import.ts",
			"begin": "(?<!\\.|\\$)(?:(\\bexport)\\s+)?\\b(import)(?!(\\s*:)|(\\$))\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.export.ts"
				},
				"2": {
					"name": "keyword.other.import.ts"
				}
			},
			"end": "(?=;|$)",
			"patterns": [
				{
					"include": "#import-export-declaration"
				}
			]
		},
		"export-declaration": {
			"patterns": [
				{
					"match": "(?<!\\.|\\$)\\b(export)\\s+(as)\\s+(namespace)\\s+([_$[:alpha:]][_$[:alnum:]]*)",
					"captures": {
						"1": {
							"name": "keyword.other.export.ts"
						},
						"2": {
							"name": "keyword.other.as.ts"
						},
						"3": {
							"name": "storage.type.namespace.ts"
						}
					}
				},
				{
					"name": "meta.export.default.ts",
					"begin": "(?<!\\.|\\$)\\b(export)(?:(?:\\s*(=))|(?:\\s+(default)(?=\\s+)))",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.export.ts"
						},
						"2": {
							"name": "keyword.operator.assignment.ts"
						},
						"3": {
							"name": "keyword.other.default.ts"
						}
					},
					"end": "(?=;|\\bexport\\b|\\bfunction\\b|\\bclass\\b|\\binterface\\b|\\blet\\b|\\bvar\\b|\\bconst\\b|\\bimport\\b|\\benum\\b|\\bnamespace\\b|\\bmodule\\b|\\btype\\b|\\babstract\\b|\\bdeclare\\b|\\basync\\b|$)",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"name": "meta.export.ts",
					"begin": "(?<!\\.|\\$)\\b(export)(?!(\\s*:)|(\\$))\\b",
					"beginCaptures": {
						"0": {
							"name": "keyword.other.export.ts"
						}
					},
					"end": "(?=;|\\bexport\\b|\\bfunction\\b|\\bclass\\b|\\binterface\\b|\\blet\\b|\\bvar\\b|\\bconst\\b|\\bimport\\b|\\benum\\b|\\bnamespace\\b|\\bmodule\\b|\\btype\\b|\\babstract\\b|\\bdeclare\\b|\\basync\\b|$)",
					"patterns": [
						{
							"include": "#import-export-declaration"
						}
					]
				}
			]
		},
		"import-export-declaration": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#string"
				},
				{
					"include": "#import-export-block"
				},
				{
					"name": "keyword.other.from.ts",
					"match": "\\bfrom\\b"
				},
				{
					"include": "#import-export-clause"
				}
			]
		},
		"import-export-block": {
			"name": "meta.block.ts",
			"begin": "\\{",
			"end": "\\}",
			"patterns": [
				{
					"include": "#import-export-clause"
				}
			]
		},
		"import-export-clause": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"comment": "(default|*|name) as alias",
					"match": "(?x) (?: \\b(default)\\b | (\\*) | ([_$[:alpha:]][_$[:alnum:]]*)) \\s+  (as) \\s+ (?: (\\b default \\b | \\*) | ([_$[:alpha:]][_$[:alnum:]]*))",
					"captures": {
						"1": {
							"name": "keyword.other.default.ts"
						},
						"4": {
							"name": "keyword.other.as.ts"
						},
						"5": {
							"name": "invalid.illegal.ts"
						}
					}
				},
				{
					"name": "keyword.other.default.ts",
					"match": "\\b(default)\\b"
				}
			]
		},
		"class-or-interface-declaration": {
			"name": "meta.class.ts",
			"begin": "(?<!\\.|\\$)\\b(?:(export)\\s+)?\\b(?:(abstract)\\s+)?\\b(?:(class)|(interface))\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.export.ts"
				},
				"2": {
					"name": "storage.modifier.ts"
				},
				"3": {
					"name": "storage.type.class.ts"
				},
				"4": {
					"name": "storage.type.interface.ts"
				}
			},
			"end": "(?<=\\})",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#class-or-interface-heritage"
				},
				{
					"include": "#type-parameters"
				},
				{
					"include": "#class-or-interface-body"
				}
			]
		},
		"class-or-interface-heritage": {
			"begin": "(?<!\\.|\\$)(?:\\b(extends|implements)\\b)(?!\\$)",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.ts"
				}
			},
			"end": "(?=\\{)",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#class-or-interface-heritage"
				},
				{
					"include": "#type-parameters"
				}
			]
		},
		"class-or-interface-body": {
			"begin": "\\{",
			"end": "\\}",
			"patterns": [
				{
					"include": "#string"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#decorator"
				},
				{
					"include": "#method-declaration"
				},
				{
					"include": "#indexer-declaration"
				},
				{
					"include": "#field-declaration"
				},
				{
					"include": "#type-annotation"
				},
				{
					"include": "#variable-initializer"
				},
				{
					"include": "#access-modifier"
				},
				{
					"include": "#property-accessor"
				},
				{
					"include": "#expression"
				}
			]
		},
		"type-object": {
			"name": "meta.object.type.ts",
			"begin": "\\{",
			"end": "\\}",
			"patterns": [
				{
					"include": "#type-object-members"
				}
			]
		},
		"type-object-members": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#method-declaration"
				},
				{
					"include": "#indexer-declaration"
				},
				{
					"include": "#field-declaration"
				},
				{
					"include": "#type-annotation"
				},
				{
					"begin": "\\.\\.\\.",
					"beginCaptures": {
						"0": {
							"name": "keyword.operator.spread.ts"
						}
					},
					"end": "(?=\\}|;|,|$)|(?<=\\})",
					"patterns": [
						{
							"include": "#type"
						}
					]
				}
			]
		},
		"field-declaration": {
			"name": "meta.field.declaration.ts",
			"begin": "(?<!\\()(?:(?<!\\.|\\$)\\b(readonly)\\s+)?(?=(([_$[:alpha:]][_$[:alnum:]]*)|(\\'[^']*\\')|(\\\"[^\"]*\\\")|(\\[[^\\]]*\\]))\\s*(\\?\\s*)?(=|:))",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.ts"
				}
			},
			"end": "(?=\\}|;|,|$)|(?<=\\})",
			"patterns": [
				{
					"include": "#variable-initializer"
				},
				{
					"begin": "(?=((?:[_$[:alpha:]][_$[:alnum:]]*)|(?:\\'[^']*\\')|(?:\\\"[^\"]*\\\")|(\\[[^\\]]*\\]))\\s*(\\?\\s*)?(=|:))",
					"end": "(?=[};,=]|$)|(?<=\\})",
					"patterns": [
						{
							"include": "#type-annotation"
						},
						{
							"include": "#string"
						},
						{
							"include": "#array-literal"
						},
						{
							"include": "#comment"
						},
						{
							"name": "variable.object.property.ts",
							"match": "[_$[:alpha:]][_$[:alnum:]]*"
						},
						{
							"name": "keyword.operator.optional.ts",
							"match": "\\?"
						}
					]
				}
			]
		},
		"method-declaration": {
			"name": "meta.method.declaration.ts",
			"begin": "(?<!\\.|\\$)(?:\\b(public|private|protected)\\s+)?(?:\\b(abstract)\\s+)?(?:\\b(async)\\s+)?(?:\\b(get|set)\\s+)?(?:(?:\\b(?:(new)|(constructor))\\b(?!\\$|:))|(?:(\\*)\\s*)?(?=((([_$[:alpha:]][_$[:alnum:]]*)|(\\'[^']*\\')|(\\\"[^\"]*\\\")|(\\[[^\\]]*\\]))\\s*(\\??))?\\s*[\\(\\<]))",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.ts"
				},
				"2": {
					"name": "storage.modifier.ts"
				},
				"3": {
					"name": "storage.modifier.async.ts"
				},
				"4": {
					"name": "storage.type.property.ts"
				},
				"5": {
					"name": "keyword.operator.new.ts"
				},
				"6": {
					"name": "storage.type.ts"
				},
				"7": {
					"name": "keyword.generator.asterisk.ts"
				}
			},
			"end": "(?=\\}|;|,)|(?<=\\})",
			"patterns": [
				{
					"include": "#method-declaration-name"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#type-parameters"
				},
				{
					"include": "#function-parameters"
				},
				{
					"include": "#return-type"
				},
				{
					"include": "#method-overload-declaration"
				},
				{
					"include": "#decl-block"
				}
			]
		},
		"method-overload-declaration": {
			"begin": "(?<!\\.|\\$)(?:\\b(public|private|protected)\\s+)?(?:\\b(abstract)\\s+)?(?:\\b(async)\\s+)?(?:\\b(get|set)\\s+)?(?:(?:\\b(?:(new)|(constructor))\\b(?!\\$|:))|(?:(\\*)\\s*)?(?=((([_$[:alpha:]][_$[:alnum:]]*)|(\\'[^']*\\')|(\\\"[^\"]*\\\")|(\\[[^\\]]*\\]))\\s*(\\??))?\\s*[\\(\\<]))",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.ts"
				},
				"2": {
					"name": "storage.modifier.ts"
				},
				"3": {
					"name": "storage.modifier.async.ts"
				},
				"4": {
					"name": "storage.type.property.ts"
				},
				"5": {
					"name": "keyword.operator.new.ts"
				},
				"6": {
					"name": "storage.type.ts"
				},
				"7": {
					"name": "keyword.generator.asterisk.ts"
				}
			},
			"end": "(?=\\(|\\<)",
			"patterns": [
				{
					"include": "#method-declaration-name"
				}
			]
		},
		"method-declaration-name": {
			"begin": "(?=(([_$[:alpha:]][_$[:alnum:]]*)|(\\'[^']*\\')|(\\\"[^\"]*\\\")|(\\[[^\\]]*\\]))\\s*(\\??)\\s*[\\(\\<])",
			"end": "(?=\\(|\\<)",
			"patterns": [
				{
					"include": "#string"
				},
				{
					"include": "#array-literal"
				},
				{
					"name": "entity.name.function.ts",
					"match": "[_$[:alpha:]][_$[:alnum:]]*"
				},
				{
					"name": "keyword.operator.optional.ts",
					"match": "\\?"
				}
			]
		},
		"indexer-declaration": {
			"name": "meta.indexer.declaration.ts",
			"begin": "(?:(?<!\\.|\\$)\\b(readonly)\\s*)?(\\[)\\s*([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=:)",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.ts"
				},
				"2": {
					"name": "meta.brace.square.ts"
				}
			},
			"end": "(\\])\\s*(\\?\\s*)?|$",
			"endCaptures": {
				"1": {
					"name": "meta.brace.square.ts"
				},
				"2": {
					"name": "keyword.operator.optional.ts"
				}
			},
			"patterns": [
				{
					"include": "#type-annotation"
				}
			]
		},
		"function-declaration": {
			"name": "meta.function.ts",
			"begin": "(?<!\\.|\\$)\\b(?:(export)\\s+)?(?:(async)\\s+)?(function\\b)(?:\\s*(\\*))?(?:(?:\\s+|(?<=\\*))([_$[:alpha:]][_$[:alnum:]]*))?\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.export.ts"
				},
				"2": {
					"name": "storage.modifier.async.ts"
				},
				"3": {
					"name": "storage.type.function.ts"
				},
				"4": {
					"name": "keyword.generator.asterisk.ts"
				},
				"5": {
					"name": "entity.name.function.ts"
				}
			},
			"end": "(?=;|\\})|(?<=\\})",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#type-parameters"
				},
				{
					"include": "#function-parameters"
				},
				{
					"include": "#return-type"
				},
				{
					"include": "#function-overload-declaration"
				},
				{
					"include": "#decl-block"
				}
			]
		},
		"function-overload-declaration": {
			"name": "meta.function.overload.ts",
			"match": "(?<!\\.|\\$)\\b(?:(export)\\s+)?(?:(async)\\s+)?(function\\b)(?:\\s*(\\*))?(?:(?:\\s+|(?<=\\*))([_$[:alpha:]][_$[:alnum:]]*))?\\s*",
			"captures": {
				"1": {
					"name": "keyword.other.export.ts"
				},
				"2": {
					"name": "storage.modifier.async.ts"
				},
				"3": {
					"name": "storage.type.function.ts"
				},
				"4": {
					"name": "keyword.generator.asterisk.ts"
				},
				"5": {
					"name": "entity.name.function.ts"
				}
			}
		},
		"object-literal": {
			"name": "meta.object-literal.ts",
			"begin": "\\{",
			"end": "\\}",
			"patterns": [
				{
					"include": "#object-member"
				}
			]
		},
		"decl-block": {
			"name": "meta.block.ts",
			"begin": "\\{",
			"end": "\\}",
			"patterns": [
				{
					"include": "#statements"
				}
			]
		},
		"after-operator-block": {
			"name": "meta.object-literal.ts",
			"begin": "(?<=[=(,\\[?+!]|await|return|yield|throw|in|of|typeof|&&|\\|\\||\\*)\\s*(\\{)",
			"end": "\\}",
			"patterns": [
				{
					"include": "#object-member"
				}
			]
		},
		"return-type": {
			"name": "meta.return.type.ts",
			"begin": "(?<=\\))\\s*(:)",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.type.annotation.ts"
				}
			},
			"end": "(?<!:)((?=$)|(?=\\{|;|//|\\}))",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"name": "meta.object.type.ts",
					"begin": "(?<=:)\\s*(\\{)",
					"beginCaptures": {
					},
					"end": "\\}",
					"endCaptures": {
					},
					"patterns": [
						{
							"include": "#type-object-members"
						}
					]
				},
				{
					"include": "#type-predicate-operator"
				},
				{
					"include": "#type"
				}
			]
		},
		"type-predicate-operator": {
			"name": "keyword.operator.is.ts",
			"match": "(?<!\\.|\\$)\\bis\\b(?!\\$)"
		},
		"type-annotation": {
			"name": "meta.type.annotation.ts",
			"begin": ":",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.type.annotation.ts"
				}
			},
			"end": "(?=$|[,);\\}\\]]|//)|(?==[^>])|(?<=[\\}>\\]\\)]|[_$[:alpha:]])\\s*(?=\\{)",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#type"
				}
			]
		},
		"type": {
			"name": "meta.type.ts",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#string"
				},
				{
					"include": "#numeric-literal"
				},
				{
					"include": "#type-parameters"
				},
				{
					"include": "#type-tuple"
				},
				{
					"include": "#type-object"
				},
				{
					"include": "#type-operators"
				},
				{
					"include": "#type-fn-type-parameters"
				},
				{
					"include": "#type-paren-or-function-parameters"
				},
				{
					"include": "#type-function-return-type"
				}
			]
		},
		"function-parameters": {
			"name": "meta.parameters.ts",
			"begin": "\\(",
			"end": "\\)",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#decorator"
				},
				{
					"include": "#type-annotation"
				},
				{
					"include": "#variable-initializer"
				}
			]
		},
		"type-paren-or-function-parameters": {
			"name": "meta.type.paren.cover.ts",
			"begin": "\\s*(\\()",
			"beginCaptures": {
				"1": {
					"name": "meta.brace.round.ts"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "meta.brace.round.ts"
				}
			},
			"patterns": [
				{
					"include": "#type"
				},
				{
					"include": "#function-parameters"
				}
			]
		},
		"type-fn-type-parameters": {
			"patterns": [
				{
					"name": "meta.type.constructor.ts",
					"match": "(?<!\\.|\\$)\\b(new)\\b(?=\\s*\\<)",
					"captures": {
						"1": {
							"name": "keyword.control.new.ts"
						}
					}
				},
				{
					"name": "meta.type.constructor.ts",
					"begin": "(?<!\\.|\\$)\\b(new)\\b\\s*(?=\\()",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.new.ts"
						}
					},
					"end": "(?<=\\))",
					"patterns": [
						{
							"include": "#function-parameters"
						}
					]
				},
				{
					"name": "meta.type.function.ts",
					"begin": "(?<=\\>)\\s*(?=\\()",
					"end": "(?<=\\))",
					"patterns": [
						{
							"include": "#function-parameters"
						}
					]
				},
				{
					"name": "meta.type.function.ts",
					"begin": "(?x)( \\s* (?= [(]\\s*( ([)]) |  (\\.\\.\\.) | ([_$[:alnum:]]+\\s*( ([:,?=])| ([)]\\s*=>) )) ) ) )",
					"end": "(?<=\\))",
					"patterns": [
						{
							"include": "#function-parameters"
						}
					]
				}
			]
		},
		"type-operators": {
			"patterns": [
				{
					"include": "#typeof-operator"
				},
				{
					"name": "keyword.operator.type.ts",
					"match": "[&|]"
				}
			]
		},
		"type-function-return-type": {
			"name": "meta.type.function.return.ts",
			"begin": "=>",
			"beginCaptures": {
				"0": {
					"name": "storage.type.function.arrow.ts"
				}
			},
			"end": "(?<!=>)(?=[,\\]\\)\\{\\}=;>]|//|$)",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"name": "meta.object.type.ts",
					"begin": "(?<==>)\\s*(\\{)",
					"beginCaptures": {
					},
					"end": "\\}",
					"endCaptures": {
					},
					"patterns": [
						{
							"include": "#type-object-members"
						}
					]
				},
				{
					"include": "#type-predicate-operator"
				},
				{
					"include": "#type"
				}
			]
		},
		"type-tuple": {
			"name": "meta.type.tuple.ts",
			"begin": "\\[",
			"beginCaptures": {
				"0": {
					"name": "meta.brace.square.ts"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "meta.brace.square.ts"
				}
			},
			"patterns": [
				{
					"include": "#type"
				}
			]
		},
		"type-parameters": {
			"name": "meta.type.parameters.ts",
			"begin": "(<)",
			"end": "(?=$)|(>)",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"name": "storage.modifier.ts",
					"match": "(?<!\\.|\\$)\\b(extends)\\b(?!\\$)"
				},
				{
					"include": "#type"
				}
			]
		},
		"variable-initializer": {
			"begin": "(?<!=|!)(=)(?!=)",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.assignment.ts"
				}
			},
			"end": "(?=$|[,);}\\]])",
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"for-loop": {
			"begin": "(?<!\\.|\\$)\\b(for)\\s*(\\()",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.loop.ts"
				},
				"2": {
					"name": "meta.brace.round.ts"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "meta.brace.round.ts"
				}
			},
			"patterns": [
				{
					"include": "#var-expr"
				},
				{
					"include": "#expression"
				}
			]
		},
		"switch-expression": {
			"name": "switch-expression.expr.ts",
			"begin": "(?<!\\.|\\$)\\b(switch)\\s*(\\()",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.switch.ts"
				},
				"2": {
					"name": "meta.brace.round.ts"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "meta.brace.round.ts"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"switch-block": {
			"name": "switch-block.expr.ts",
			"begin": "{",
			"end": "(?=\\})",
			"patterns": [
				{
					"include": "#case-clause"
				},
				{
					"include": "#statements"
				}
			]
		},
		"case-clause": {
			"name": "case-clause.expr.ts",
			"begin": "(?<!\\.|\\$)\\b(case|default(?=:))\\b(?!\\$)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.switch.ts"
				}
			},
			"end": ":",
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"switch-statement": {
			"name": "switch-statement.expr.ts",
			"begin": "(?<!\\.|\\$)(?=\\bswitch\\s*\\()",
			"end": "}",
			"patterns": [
				{
					"include": "#switch-expression"
				},
				{
					"include": "#switch-block"
				}
			]
		},
		"function-call": {
			"begin": "(?:(\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=(<([^<>]|\\<[^<>]+\\>)+>\\s*)?\\()",
			"end": "(?=\\()",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"name": "meta.type.parameters.ts",
					"begin": "\\<",
					"beginCaptures": {
					},
					"end": "\\>",
					"endCaptures": {
					},
					"patterns": [
						{
							"include": "#type"
						}
					]
				}
			]
		},
		"identifiers": {
			"patterns": [
				{
					"name": "support.class.ts",
					"match": "([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*\\.\\s*prototype\\b(?!\\$))"
				},
				{
					"match": "(?x)(\\.)\\s*(?:\n  ([[:upper:]][_$[:digit:][:upper:]]*) |\n  ([_$[:alpha:]][_$[:alnum:]]*)\n)(?=\\s*\\.\\s*[_$[:alpha:]][_$[:alnum:]]*)",
					"captures": {
						"2": {
							"name": "constant.other.object.property.ts"
						}
					}
				},
				{
					"match": "(\\.)\\s*([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])",
					"captures": {
						"2": {
							"name": "constant.other.property.ts"
						}
					}
				},
				{
					"match": "(?x)(?:\n  ([[:upper:]][_$[:digit:][:upper:]]*) |\n  ([_$[:alpha:]][_$[:alnum:]]*)\n)(?=\\s*\\.\\s*[_$[:alpha:]][_$[:alnum:]]*)",
					"captures": {
						"1": {
							"name": "constant.other.object.ts"
						}
					}
				},
				{
					"name": "constant.other.ts",
					"match": "([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])"
				}
			]
		},
		"cast": {
			"name": "cast.expr.ts",
			"begin": "(?:(?<=return|throw|yield|await|default|[=(,:>*]))\\s*(<)(?!<?\\=)",
			"beginCaptures": {
				"1": {
					"name": "meta.brace.angle.ts"
				}
			},
			"end": ">",
			"endCaptures": {
				"0": {
					"name": "meta.brace.angle.ts"
				}
			},
			"patterns": [
				{
					"include": "#type"
				}
			]
		},
		"new-expr": {
			"name": "new.expr.ts",
			"begin": "(?<!\\.|\\$)\\b(new)\\b(?!\\$)",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.new.ts"
				}
			},
			"end": "(?=[(;),]|$|((?<!\\.|\\$)\\bnew\\b(?!\\$)))",
			"patterns": [
				{
					"include": "#type"
				}
			]
		},
		"object-member": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#method-declaration"
				},
				{
					"name": "meta.object.member.ts",
					"begin": "(?=(?:(?:\\'[^']*\\')|(?:\\\"[^\"]*\\\")|(?:\\[[^\\]]*\\]))\\s*:)",
					"end": "(?=,|\\})",
					"patterns": [
						{
							"name": "meta.object-literal.key.ts",
							"begin": "(?=(?:(?:\\'[^']*\\')|(?:\\\"[^\"]*\\\")|(?:\\[[^\\]]*\\]))\\s*:)",
							"end": ":",
							"patterns": [
								{
									"include": "#string"
								},
								{
									"include": "#array-literal"
								}
							]
						},
						{
							"include": "#expression"
						}
					]
				},
				{
					"name": "meta.object.member.ts",
					"begin": "(?x)(?:([_$[:alpha:]][_$[:alnum:]]*)\\s*(:)(?=\\s*( (async\\s+)|(function\\s+)| ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)| ((<([^<>]|\\<[^<>]+\\>)+>\\s*)?\\(([^()]|\\([^()]*\\))*\\)(\\s*:\\s*(.)*)?\\s*=>))))",					"beginCaptures": {

						"1": {
							"name": "entity.name.function.ts"
						}
					},
					"end": "(?=,|\\})",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"name": "meta.object.member.ts",
					"begin": "(?:[_$[:alpha:]][_$[:alnum:]]*)\\s*(:)",
					"beginCaptures": {
						"0": {
							"name": "meta.object-literal.key.ts"
						}
					},
					"end": "(?=,|\\})",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"name": "meta.object.member.ts",
					"begin": "\\.\\.\\.",
					"beginCaptures": {
						"0": {
							"name": "keyword.operator.spread.ts"
						}
					},
					"end": "(?=,|\\})",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"name": "meta.object.member.ts",
					"match": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=,|\\}|$)"
				}
			]
		},
		"expression-operators": {
			"patterns": [
				{
					"name": "keyword.control.flow.ts",
					"match": "(?<!\\.|\\$)\\b(await)\\b(?!\\$)"
				},
				{
					"name": "keyword.operator.delete.ts",
					"match": "(?<!\\.|\\$)\\bdelete\\b(?!\\$)"
				},
				{
					"name": "keyword.operator.in.ts",
					"match": "(?<!\\.|\\$)\\bin\\b(?!\\$)"
				},
				{
					"name": "keyword.operator.of.ts",
					"match": "(?<!\\.|\\$)\\bof\\b(?!\\$)"
				},
				{
					"name": "keyword.operator.instanceof.ts",
					"match": "(?<!\\.|\\$)\\binstanceof\\b(?!\\$)"
				},
				{
					"name": "keyword.operator.new.ts",
					"match": "(?<!\\.|\\$)\\bnew\\b(?!\\$)"
				},
				{
					"include": "#typeof-operator"
				},
				{
					"name": "keyword.operator.void.ts",
					"match": "(?<!\\.|\\$)\\bvoid\\b(?!\\$)"
				},
				{
					"begin": "(?<!\\.|\\$)\\bas\\b(?!\\$)",
					"beginCaptures": {
						"0": {
							"name": "keyword.control.as.ts"
						}
					},
					"end": "(?=$|[;,:})\\]])",
					"patterns": [
						{
							"include": "#type"
						}
					]
				},
				{
					"name": "keyword.operator.spread.ts",
					"match": "\\.\\.\\."
				},
				{
					"name": "keyword.operator.assignment.compound.ts",
					"match": "\\*=|(?<!\\()/=|%=|\\+=|\\-="
				},
				{
					"name": "keyword.operator.assignment.compound.bitwise.ts",
					"match": "\\&=|\\^=|<<=|>>=|>>>=|\\|="
				},
				{
					"name": "keyword.operator.bitwise.shift.ts",
					"match": "<<|>>>|>>"
				},
				{
					"name": "keyword.operator.comparison.ts",
					"match": "===|!==|==|!="
				},
				{
					"name": "keyword.operator.relational.ts",
					"match": "<=|>=|<>|<|>"
				},
				{
					"name": "keyword.operator.logical.ts",
					"match": "\\!|&&|\\|\\|"
				},
				{
					"name": "keyword.operator.bitwise.ts",
					"match": "\\&|~|\\^|\\|"
				},
				{
					"name": "keyword.operator.assignment.ts",
					"match": "\\="
				},
				{
					"name": "keyword.operator.decrement.ts",
					"match": "--"
				},
				{
					"name": "keyword.operator.increment.ts",
					"match": "\\+\\+"
				},
				{
					"name": "keyword.operator.arithmetic.ts",
					"match": "%|\\*|/|-|\\+"
				}
			]
		},
		"typeof-operator": {
			"name": "keyword.operator.typeof.ts",
			"match": "(?<!\\.|\\$)\\btypeof\\b(?!\\$)"
		},
		"arrow-function": {
			"patterns": [
				{
					"name": "meta.arrow.ts",
					"match": "(?<!\\.|\\$)(\\basync)(?=\\s*[<(])",
					"captures": {
						"1": {
							"name": "storage.modifier.async.ts"
						}
					}
				},
				{
					"name": "meta.arrow.ts",
					"match": "(?:(?<!\\.|\\$)(\\basync)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)\\s*(?==>)",
					"captures": {
						"1": {
							"name": "storage.modifier.async.ts"
						}
					}
				},
				{
					"name": "meta.arrow.ts",
					"begin": "(?x)\\s*(?=(<([^<>]|\\<[^<>]+\\>)+>\\s*)?\\(([^()]|\\([^()]*\\))*\\)(\\s*:\\s*(.)*)?\\s*=>)",
					"end": "(?==>)",
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"include": "#type-parameters"
						},
						{
							"include": "#function-parameters"
						},
						{
							"include": "#arrow-return-type"
						}
					]
				},
				{
					"name": "meta.arrow.ts",
					"begin": "=>",
					"beginCaptures": {
						"0": {
							"name": "storage.type.function.arrow.ts"
						}
					},
					"end": "(?<=\\})|((?!\\{)(?=\\S))",
					"patterns": [
						{
							"include": "#decl-block"
						},
						{
							"include": "#expression"
						}
					]
				}
			]
		},
		"arrow-return-type": {
			"name": "meta.return.type.arrow.ts",
			"begin": "(?<=\\))\\s*(:)",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.type.annotation.ts"
				}
			},
			"end": "(?<!:)((?=$)|(?==>|;|//))",
			"patterns": [
				{
					"include": "#type-predicate-operator"
				},
				{
					"include": "#type"
				}
			]
		},
		"paren-expression": {
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "meta.brace.round.ts"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "meta.brace.round.ts"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"qstring-double": {
			"name": "string.quoted.double.ts",
			"begin": "\"",
			"end": "(\")|((?:[^\\\\\\n])$)",
			"endCaptures": {
				"2": {
					"name": "invalid.illegal.newline.ts"
				}
			},
			"patterns": [
				{
					"include": "#string-character-escape"
				}
			]
		},
		"qstring-single": {
			"name": "string.quoted.single.ts",
			"begin": "'",
			"end": "(\\')|((?:[^\\\\\\n])$)",
			"endCaptures": {
				"2": {
					"name": "invalid.illegal.newline.ts"
				}
			},
			"patterns": [
				{
					"include": "#string-character-escape"
				}
			]
		},
		"regex": {
			"patterns": [
				{
					"name": "string.regex.ts",
					"begin": "(?<=[=(:,\\[?+!]|return|case|=>|&&|\\|\\||\\*\\/)\\s*(/)(?![/*+?])(?=.*/)",
					"beginCaptures": {
					},
					"end": "(/)([gimuy]*)",
					"endCaptures": {
						"2": {
							"name": "keyword.other.ts"
						}
					},
					"patterns": [
						{
							"include": "#regexp"
						}
					]
				},
				{
					"name": "string.regex.ts",
					"begin": "/(?![/*])(?=(?:[^/\\\\\\[]|\\\\.|\\[([^\\]\\\\]|\\\\.)+\\])+/(?![/*])[gimy]*(?!\\s*[a-zA-Z0-9_$]))",
					"beginCaptures": {
					},
					"end": "(/)([gimuy]*)",
					"endCaptures": {
						"2": {
							"name": "keyword.other.ts"
						}
					},
					"patterns": [
						{
							"include": "#regexp"
						}
					]
				}
			]
		},
		"regexp": {
			"patterns": [
				{
					"name": "keyword.control.anchor.regexp",
					"match": "\\\\[bB]|\\^|\\$"
				},
				{
					"name": "keyword.other.back-reference.regexp",
					"match": "\\\\[1-9]\\d*"
				},
				{
					"name": "keyword.operator.quantifier.regexp",
					"match": "[?+*]|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??"
				},
				{
					"name": "keyword.operator.or.regexp",
					"match": "\\|"
				},
				{
					"name": "meta.group.assertion.regexp",
					"begin": "(\\()((\\?=)|(\\?!))",
					"beginCaptures": {
						"3": {
							"name": "meta.assertion.look-ahead.regexp"
						},
						"4": {
							"name": "meta.assertion.negative-look-ahead.regexp"
						}
					},
					"end": "(\\))",
					"endCaptures": {
					},
					"patterns": [
						{
							"include": "#regexp"
						}
					]
				},
				{
					"name": "meta.group.regexp",
					"begin": "\\((\\?:)?",
					"beginCaptures": {
					},
					"end": "\\)",
					"endCaptures": {
					},
					"patterns": [
						{
							"include": "#regexp"
						}
					]
				},
				{
					"name": "constant.other.character-class.set.regexp",
					"begin": "(\\[)(\\^)?",
					"beginCaptures": {
						"2": {
							"name": "keyword.operator.negation.regexp"
						}
					},
					"end": "(\\])",
					"endCaptures": {
					},
					"patterns": [
						{
							"name": "constant.other.character-class.range.regexp",
							"match": "(?:.|(\\\\(?:[0-7]{3}|x\\h\\h|u\\h\\h\\h\\h))|(\\\\c[A-Z])|(\\\\.))\\-(?:[^\\]\\\\]|(\\\\(?:[0-7]{3}|x\\h\\h|u\\h\\h\\h\\h))|(\\\\c[A-Z])|(\\\\.))",
							"captures": {
								"1": {
									"name": "constant.character.numeric.regexp"
								},
								"2": {
									"name": "constant.character.control.regexp"
								},
								"3": {
									"name": "constant.character.escape.backslash.regexp"
								},
								"4": {
									"name": "constant.character.numeric.regexp"
								},
								"5": {
									"name": "constant.character.control.regexp"
								},
								"6": {
									"name": "constant.character.escape.backslash.regexp"
								}
							}
						},
						{
							"include": "#regex-character-class"
						}
					]
				},
				{
					"include": "#regex-character-class"
				}
			]
		},
		"regex-character-class": {
			"patterns": [
				{
					"name": "constant.other.character-class.regexp",
					"match": "\\\\[wWsSdDtrnvf]|\\."
				},
				{
					"name": "constant.character.numeric.regexp",
					"match": "\\\\([0-7]{3}|x\\h\\h|u\\h\\h\\h\\h)"
				},
				{
					"name": "constant.character.control.regexp",
					"match": "\\\\c[A-Z]"
				},
				{
					"name": "constant.character.escape.backslash.regexp",
					"match": "\\\\."
				}
			]
		},
		"string": {
			"name": "string.ts",
			"patterns": [
				{
					"include": "#qstring-single"
				},
				{
					"include": "#qstring-double"
				}
			]
		},
		"template": {
			"name": "string.template.ts",
			"begin": "([_$[:alpha:]][_$[:alnum:]]*)?(`)",
			"beginCaptures": {
				"1": {
					"name": "entity.name.function.tagged-template.ts"
				}
			},
			"end": "`",
			"patterns": [
				{
					"include": "#template-substitution-element"
				},
				{
					"include": "#string-character-escape"
				}
			]
		},
		"string-character-escape": {
			"name": "constant.character.escape.ts",
			"match": "\\\\(x\\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)"
		},
		"template-substitution-element": {
			"name": "meta.template.expression.ts",
			"begin": "\\$\\{",
			"end": "\\}",
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"literal": {
			"name": "literal.ts",
			"patterns": [
				{
					"include": "#numeric-literal"
				},
				{
					"include": "#boolean-literal"
				},
				{
					"include": "#null-literal"
				},
				{
					"include": "#undefined-literal"
				},
				{
					"include": "#numericConstant-literal"
				},
				{
					"include": "#array-literal"
				},
				{
					"include": "#this-literal"
				},
				{
					"include": "#super-literal"
				}
			]
		},
		"array-literal": {
			"name": "meta.array.literal.ts",
			"begin": "\\[",
			"beginCaptures": {
				"0": {
					"name": "meta.brace.square.ts"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "meta.brace.square.ts"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"numeric-literal": {
			"patterns": [
				{
					"name": "constant.numeric.hex.ts",
					"match": "\\b(?<!\\$)0(x|X)[0-9a-fA-F]+\\b(?!\\$)"
				},
				{
					"name": "constant.numeric.binary.ts",
					"match": "\\b(?<!\\$)0(b|B)[01]+\\b(?!\\$)"
				},
				{
					"name": "constant.numeric.octal.ts",
					"match": "\\b(?<!\\$)0(o|O)?[0-7]+\\b(?!\\$)"
				},
				{
					"match": "(?x)\n(?<!\\$)(?:\n  (?:\\b[0-9]+(\\.)[0-9]+[eE][+-]?[0-9]+\\b)| # 1.1E+3\n  (?:\\b[0-9]+(\\.)[eE][+-]?[0-9]+\\b)|       # 1.E+3\n  (?:\\B(\\.)[0-9]+[eE][+-]?[0-9]+\\b)|       # .1E+3\n  (?:\\b[0-9]+[eE][+-]?[0-9]+\\b)|            # 1E+3\n  (?:\\b[0-9]+(\\.)[0-9]+\\b)|                # 1.1\n  (?:\\b[0-9]+(\\.)\\B)|                      # 1.\n  (?:\\B(\\.)[0-9]+\\b)|                      # .1\n  (?:\\b[0-9]+\\b(?!\\.))                     # 1\n)(?!\\$)",
					"captures": {
						"0": {
							"name": "constant.numeric.decimal.ts"
						},
						"1": {
							"name": "meta.delimiter.decimal.period.ts"
						},
						"2": {
							"name": "meta.delimiter.decimal.period.ts"
						},
						"3": {
							"name": "meta.delimiter.decimal.period.ts"
						},
						"4": {
							"name": "meta.delimiter.decimal.period.ts"
						},
						"5": {
							"name": "meta.delimiter.decimal.period.ts"
						},
						"6": {
							"name": "meta.delimiter.decimal.period.ts"
						}
					}
				}
			]
		},
		"boolean-literal": {
			"patterns": [
				{
					"name": "constant.language.boolean.true.ts",
					"match": "(?<!\\.|\\$)\\btrue\\b(?!\\$)"
				},
				{
					"name": "constant.language.boolean.false.ts",
					"match": "(?<!\\.|\\$)\\bfalse\\b(?!\\$)"
				}
			]
		},
		"null-literal": {
			"name": "constant.language.null.ts",
			"match": "(?<!\\.|\\$)\\bnull\\b(?!\\$)"
		},
		"this-literal": {
			"name": "variable.language.this.ts",
			"match": "(?<!\\.|\\$)\\bthis\\b(?!\\$)"
		},
		"super-literal": {
			"name": "variable.language.super.ts",
			"match": "(?<!\\.|\\$)\\bsuper\\b(?!\\$)"
		},
		"undefined-literal": {
			"name": "constant.language.undefined.ts",
			"match": "(?<!\\.|\\$)\\bundefined\\b(?!\\$)"
		},
		"numericConstant-literal": {
			"patterns": [
				{
					"name": "constant.language.nan.ts",
					"match": "(?<!\\.|\\$)\\bNaN\\b(?!\\$)"
				},
				{
					"name": "constant.language.infinity.ts",
					"match": "(?<!\\.|\\$)\\bInfinity\\b(?!\\$)"
				}
			]
		},
		"access-modifier": {
			"name": "storage.modifier.ts",
			"match": "(?<!\\.|\\$)\\b(abstract|public|protected|private|readonly|static)\\b(?!\\$)"
		},
		"property-accessor": {
			"name": "storage.type.property.ts",
			"match": "(?<!\\.|\\$)\\b(get|set)\\b(?!\\$)"
		},
		"comment": {
			"patterns": [
				{
					"name": "comment.block.documentation.ts",
					"begin": "/\\*\\*(?!/)",
					"end": "\\*/",
					"captures": {
					},
					"patterns": [
						{
							"include": "#docblock"
						}
					]
				},
				{
					"name": "comment.block.ts",
					"begin": "/\\*",
					"end": "\\*/",
					"captures": {
					}
				},
				{
					"begin": "(^[ \\t]+)?(?=//)",
					"end": "(?=$)",
					"patterns": [
						{
							"name": "comment.line.double-slash.ts",
							"begin": "//",
							"beginCaptures": {
							},
							"end": "(?=$)"
						}
					]
				}
			]
		},
		"docblock": {
			"patterns": [
				{
					"name": "storage.type.class.jsdoc",
					"match": "(?<!\\w)@(abstract|access|alias|arg|argument|async|attribute|augments|author|beta|borrows|bubbes|callback|chainable|class|classdesc|code|config|const|constant|constructor|constructs|copyright|default|defaultvalue|define|deprecated|desc|description|dict|emits|enum|event|example|exports?|extends|extension|extension_for|extensionfor|external|file|fileoverview|final|fires|for|function|global|host|ignore|implements|inherit[Dd]oc|inner|instance|interface|kind|lends|license|listens|main|member|memberof|method|mixex|mixins?|module|name|namespace|nocollapse|nosideeffects|override|overview|package|param|preserve|private|prop|property|protected|public|read[Oo]nly|record|require[ds]|returns?|see|since|static|struct|submodule|summary|template|this|throws|todo|tutorial|type|typedef|unrestricted|uses|var|variation|version|virtual|writeOnce)\\b"
				},
				{
					"match": "(?x)\n(?:(?<=@param)|(?<=@arg)|(?<=@argument)|(?<=@type))\n\\s+\n({(?:\n  \\* |                                        # {*} any type\n  \\? |                                        # {?} unknown type\n  (?:                                         # Check for a prefix\n    \\? |                                      # {?string} nullable type\n    !   |                                     # {!string} non-nullable type\n    \\.{3}                                     # {...string} variable number of parameters\n  )?\n  (?:\n    \\(                                        # Opening bracket of multiple types with parenthesis {(string|number)}\n      [a-zA-Z_$]+\n      (?:\n        (?:\n          [\\w$]*\n          (?:\\[\\])?                           # {(string[]|number)} type application, an array of strings or a number\n        ) |\n        \\.?<[\\w$]+(?:,\\s+[\\w$]+)*>            # {Array<string>} or {Object<string, number>} type application (optional .)\n      )\n      (?:\n        [\\.|~]                                # {Foo.bar} namespaced, {string|number} multiple, {Foo~bar} class-specific callback\n        [a-zA-Z_$]+\n        (?:\n          (?:\n            [\\w$]*\n            (?:\\[\\])?                        # {(string|number[])} type application, a string or an array of numbers\n          ) |\n          \\.?<[\\w$]+(?:,\\s+[\\w$]+)*>         # {Array<string>} or {Object<string, number>} type application (optional .)\n        )\n      )*\n    \\) |\n    [a-zA-Z_$]+\n    (?:\n      (?:\n        [\\w$]*\n        (?:\\[\\])?                            # {string[]|number} type application, an array of strings or a number\n      ) |\n      \\.?<[\\w$]+(?:,\\s+[\\w$]+)*>             # {Array<string>} or {Object<string, number>} type application (optional .)\n    )\n    (?:\n      [\\.|~]                                 # {Foo.bar} namespaced, {string|number} multiple, {Foo~bar} class-specific callback\n      [a-zA-Z_$]+\n      (?:\n        [\\w$]* |\n        \\.?<[\\w$]+(?:,\\s+[\\w$]+)*>           # {Array<string>} or {Object<string, number>} type application (optional .)\n      )\n    )*\n  )\n                                             # Check for suffix\n  (?:\\[\\])?                                  # {string[]} type application, an array of strings\n  =?                                         # {string=} optional parameter\n)})\n\\s+\n(\n  \\[                                         # [foo] optional parameter\n    \\s*\n    (?:\n      [a-zA-Z_$][\\w$]*\n      (?:\n        (?:\\[\\])?                            # Foo[].bar properties within an array\n        \\.                                   # Foo.Bar namespaced parameter\n        [a-zA-Z_$][\\w$]*\n      )*\n      (?:\n        \\s*\n        =                                    # [foo=bar] Default parameter value\n        \\s*\n        [\\w$\\s]*\n      )?\n    )\n    \\s*\n  \\] |\n  (?:\n    [a-zA-Z_$][\\w$]*\n    (?:\n      (?:\\[\\])?                              # Foo[].bar properties within an array\n      \\.                                     # Foo.Bar namespaced parameter\n      [a-zA-Z_$][\\w$]*\n    )*\n  )?\n)\n\\s+\n(?:-\\s+)?                                    # optional hyphen before the description\n((?:(?!\\*\\/).)*)                             # The type description",
					"captures": {
						"0": {
							"name": "other.meta.jsdoc"
						},
						"2": {
							"name": "variable.other.jsdoc"
						},
						"3": {
							"name": "other.description.jsdoc"
						}
					}
				},
				{
					"match": "(?x)\n({(?:\n  \\* |                                       # {*} any type\n  \\? |                                       # {?} unknown type\n\n  (?:                                        # Check for a prefix\n    \\? |                                     # {?string} nullable type\n    !   |                                    # {!string} non-nullable type\n    \\.{3}                                    # {...string} variable number of parameters\n  )?\n\n  (?:\n    \\(                                       # Opening bracket of multiple types with parenthesis {(string|number)}\n      [a-zA-Z_$]+\n      (?:\n        [\\w$]* |\n        \\.?<[\\w$]+(?:,\\s+[\\w$]+)*>           # {Array<string>} or {Object<string, number>} type application (optional .)\n      )\n      (?:\n        [\\.|~]                               # {Foo.bar} namespaced, {string|number} multiple, {Foo~bar} class-specific callback\n        [a-zA-Z_$]+\n        (?:\n          [\\w$]* |\n          \\.?<[\\w$]+(?:,\\s+[\\w$]+)*>         # {Array<string>} or {Object<string, number>} type application (optional .)\n        )\n      )*\n    \\) |\n    [a-zA-Z_$]+\n    (?:\n      [\\w$]* |\n      \\.?<[\\w$]+(?:,\\s+[\\w$]+)*>             # {Array<string>} or {Object<string, number>} type application (optional .)\n    )\n    (?:\n      [\\.|~]                                 # {Foo.bar} namespaced, {string|number} multiple, {Foo~bar} class-specific callback\n      [a-zA-Z_$]+\n      (?:\n        [\\w$]* |\n        \\.?<[\\w$]+(?:,\\s+[\\w$]+)*>           # {Array<string>} or {Object<string, number>} type application (optional .)\n      )\n    )*\n  )\n                                             # Check for suffix\n  (?:\\[\\])?                                  # {string[]} type application, an array of strings\n  =?                                         # {string=} optional parameter\n)})\n\\s+\n(?:-\\s+)?                                    # optional hyphen before the description\n((?:(?!\\*\\/).)*)                             # The type description",
					"captures": {
						"0": {
							"name": "other.meta.jsdoc"
						},
						"1": {
							"name": "entity.name.type.instance.jsdoc"
						},
						"2": {
							"name": "other.description.jsdoc"
						}
					}
				}
			]
		}
	},
	"version": "https://github.com/Microsoft/TypeScript-TmLanguage/commit/fea3b25eb632f689a02057a1715faab29343dda2"
}