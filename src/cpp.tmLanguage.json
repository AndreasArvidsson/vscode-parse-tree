{
	"information_for_contributors": [
		"This file has been converted from https://github.com/atom/language-c/blob/master/grammars/c%2B%2B.cson",
		"If you want to provide a fix or improvement, please create a pull request against the original repository.",
		"Once accepted there, we are happy to receive an update request."
	],
	"version": "https://github.com/atom/language-c/commit/3a269f88b12e512fb9495dc006a1dabf325d3d7f",
	"name": "C++",
	"scopeName": "source.cpp",
	"patterns": [
		{
			"include": "#strings"
		},
		{
			"match": "\\b(friend|explicit|virtual|override|final|noexcept|extern|private|protected|public|operator)\\b",
			"name": "storage.modifier.cpp"
		},
		{
			"match": "\\b(private:|protected:|public:)",
			"name": "storage.modifier.cpp"
		},
		{
			"match": "\\b(catch|try|throw)\\b",
			"name": "keyword.control.cpp"
		},
		{
			"match": "\\bdelete\\b(\\s*\\[\\])?|\\bnew\\b(?!])",
			"name": "keyword.control.cpp"
		},
		{
			"match": "\\bthis\\b",
			"name": "variable.language.this.cpp"
		},
		{
			"match": "\\bnullptr\\b",
			"name": "constant.language.cpp"
		},
		{
			"match": "\\b(template|class|decltype|struct)\\b",
			"name": "keyword.other.cpp"
		},
		{
			"match": "\\b(const_cast|dynamic_cast|reinterpret_cast|static_cast)\\b\\s*",
			"name": "keyword.operator.cast.cpp"
		},
		{
			"match": "::",
			"name": "punctuation.separator.namespace.access.cpp"
		},
		{
			"match": "\\b(and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas)\\b",
			"name": "keyword.operator.cpp"
		},
		{
			"match": "\\b(constexpr|export|mutable|typename|thread_local)\\b",
			"name": "storage.modifier.cpp"
		},
		{
			"match": "\\b(namespace|using)\\b",
			"name": "keyword.other.cpp"
		},
		{
			"match": "\\b(auto)\\b",
			"name": "keyword.other.cpp"
		},
		{
			"include": "source.c"
		}
	],
	"repository": {
		"strings": {
			"patterns": [
				{
					"begin": "(u|u8|U|L)?\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.cpp"
						},
						"1": {
							"name": "meta.encoding.cpp"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.cpp"
						}
					},
					"name": "string.quoted.double.cpp",
					"patterns": [
						{
							"match": "\\\\u\\h{4}|\\\\U\\h{8}",
							"name": "constant.character.escape.cpp"
						},
						{
							"match": "\\\\['\"?\\\\abfnrtv]",
							"name": "constant.character.escape.cpp"
						},
						{
							"match": "\\\\[0-7]{1,3}",
							"name": "constant.character.escape.cpp"
						},
						{
							"match": "\\\\x\\h+",
							"name": "constant.character.escape.cpp"
						},
						{
							"include": "source.c#string_placeholder"
						}
					]
				},
				{
					"begin": "(u|u8|U|L)?R\"(?:([^ ()\\\\\\t]{0,16})|([^ ()\\\\\\t]*))\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.cpp"
						},
						"1": {
							"name": "meta.encoding.cpp"
						},
						"3": {
							"name": "invalid.illegal.delimiter-too-long.cpp"
						}
					},
					"end": "\\)\\2(\\3)\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.cpp"
						},
						"1": {
							"name": "invalid.illegal.delimiter-too-long.cpp"
						}
					},
					"name": "string.quoted.double.raw.cpp"
				}
			]
		}
	}
}