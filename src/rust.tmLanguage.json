{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"version": "https://github.com/zargony/atom-language-rust/commit/5238d9834953ed7c58d9b5b9bb0c084c3c11ecd6",
	"name": "Rust",
	"scopeName": "source.rust",
	"patterns": [
		{
			"comment": "Regular keywords",
			"match": "\\b('static|Self|abstract|box|const|crate|dyn|enum|extern|final|fn|impl|let|macro|mod|mut|override|priv|pub|ref|self|static|struct|super|trait|type|union|unsized|virtual|where)\\b",
			"name": "keyword.other.rust"
		},
		{
			"comment": "Control keywords",
			"match": "\\b(as|async|await|become|break|continue|do|else|for|if|in|loop|match|move|return|try|typeof|unsafe|use|while|yield)\\b",
			"name": "Keyword.control.rust"
		},
		{
			"comment": "Boolean literals",
			"match": "\\b(true|false)\\b",
			"name": "constant.numeric.boolean.rust"
		},
		{
			"include": "#block_doc_comment"
		},
		{
			"include": "#block_comment"
		},
		{
			"include": "#line_doc_comment"
		},
		{
			"include": "#line_comment"
		},
		{
			"comment": "Attribute",
			"name": "meta.attribute.rust",
			"begin": "#\\!?\\[",
			"end": "\\]",
			"patterns": [
				{
					"include": "#string_literal"
				},
				{
					"include": "#block_doc_comment"
				},
				{
					"include": "#block_comment"
				},
				{
					"include": "#line_doc_comment"
				},
				{
					"include": "#line_comment"
				}
			]
		},
		{
			"comment": "Single-quote string literal (character)",
			"name": "string.quoted.single.rust",
			"match": "b?'([^'\\\\]|\\\\(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.))'"
		},
		{
			"include": "#string_literal"
		},
		{
			"include": "#raw_string_literal"
		},
		{
			"comment": "Floating point literal (fraction)",
			"name": "constant.numeric.float.rust",
			"match": "\\b[0-9][0-9_]*\\.[0-9][0-9_]*([eE][+-]?[0-9_]+)?(f32|f64)?\\b"
		},
		{
			"comment": "Floating point literal (exponent)",
			"name": "constant.numeric.float.rust",
			"match": "\\b[0-9][0-9_]*(\\.[0-9][0-9_]*)?[eE][+-]?[0-9_]+(f32|f64)?\\b"
		},
		{
			"comment": "Floating point literal (typed)",
			"name": "constant.numeric.float.rust",
			"match": "\\b[0-9][0-9_]*(\\.[0-9][0-9_]*)?([eE][+-]?[0-9_]+)?(f32|f64)\\b"
		},
		{
			"comment": "Integer literal (decimal)",
			"name": "constant.numeric.integer.decimal.rust",
			"match": "\\b[0-9][0-9_]*([ui](8|16|32|64|128|s|size))?\\b"
		},
		{
			"comment": "Integer literal (hexadecimal)",
			"name": "constant.numeric.integer.hexadecimal.rust",
			"match": "\\b0x[a-fA-F0-9_]+([ui](8|16|32|64|128|s|size))?\\b"
		},
		{
			"comment": "Integer literal (octal)",
			"name": "constant.numeric.integer.octal.rust",
			"match": "\\b0o[0-7_]+([ui](8|16|32|64|128|s|size))?\\b"
		},
		{
			"comment": "Integer literal (binary)",
			"name": "constant.numeric.integer.binary.rust",
			"match": "\\b0b[01_]+([ui](8|16|32|64|128|s|size))?\\b"
		},
		{
			"comment": "Miscellaneous operator",
			"name": "keyword.operator.misc.rust",
			"match": "(=>|::|\\bas\\b)"
		},
		{
			"comment": "Comparison operator",
			"name": "keyword.operator.comparison.rust",
			"match": "(&&|\\|\\||==|!=)"
		},
		{
			"comment": "Assignment operator",
			"name": "keyword.operator.assignment.rust",
			"match": "(\\+=|-=|/=|\\*=|%=|\\^=|&=|\\|=|<<=|>>=|=)"
		},
		{
			"comment": "Arithmetic operator",
			"name": "keyword.operator.arithmetic.rust",
			"match": "(!|\\+|-|/|\\*|%|\\^|&|\\||<<|>>)"
		},
		{
			"comment": "Comparison operator (second group because of regex precedence)",
			"name": "keyword.operator.comparison.rust",
			"match": "(<=|>=|<|>)"
		}
	],
	"repository": {
		"block_doc_comment": {
			"comment": "Block documentation comment",
			"name": "comment.block.documentation.rust",
			"begin": "/\\*[\\*!](?![\\*/])",
			"end": "\\*/",
			"patterns": [
				{
					"include": "#block_doc_comment"
				},
				{
					"include": "#block_comment"
				}
			]
		},
		"block_comment": {
			"comment": "Block comment",
			"name": "comment.block.rust",
			"begin": "/\\*",
			"end": "\\*/",
			"patterns": [
				{
					"include": "#block_doc_comment"
				},
				{
					"include": "#block_comment"
				}
			]
		},
		"line_doc_comment": {
			"comment": "Single-line documentation comment",
			"name": "comment.line.documentation.rust",
			"begin": "//[!/](?=[^/])",
			"end": "$"
		},
		"line_comment": {
			"comment": "Single-line comment",
			"name": "comment.line.double-slash.rust",
			"begin": "//",
			"end": "$"
		},
		"escaped_character": {
			"name": "constant.character.escape.rust",
			"match": "\\\\(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)"
		},
		"string_literal": {
			"comment": "Double-quote string literal",
			"name": "string.quoted.double.rust",
			"begin": "b?\"",
			"end": "\"",
			"patterns": [
				{
					"include": "#escaped_character"
				}
			]
		},
		"raw_string_literal": {
			"comment": "Raw double-quote string literal",
			"name": "string.quoted.double.raw.rust",
			"begin": "b?r(#*)\"",
			"end": "\"\\1"
		},
		"sigils": {
			"comment": "Sigil",
			"name": "keyword.operator.sigil.rust",
			"match": "[&*](?=[a-zA-Z0-9_\\(\\[\\|\\\"]+)"
		}
	}
}